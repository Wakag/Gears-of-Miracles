// Sieve of Eratosthenes for finding primes 2 <= n <= Max (Parva version)
// P.D. Terry,  Rhodes University, 2017

// Rebecca Hukfie - g22h2807
// Derrick Asiedu Aboagye - g22A3680
// Amogelang Mphela - g22a7399
// Wakanaka Gurure - g22g8069



  void main() {
    const Max = 32000;
    bool[] uncrossed = new bool[Max];          // the sieve
    int i, n, k, it, iterations, primes = 0;   // counters
    read("How many iterations? ", iterations);
    bool display = iterations == 1;
    read("Supply largest number to be tested ", n);
    if (n > Max) {
      write("n too large, sorry");
      return;
    }
    write("Prime numbers between 2 and " , n, "\n");
    write("-----------------------------------\n");
    it = 1;
    while (it <= iterations) {
      primes = 0;
      i = 2;
      while (i <= n) {                         // clear sieve
        uncrossed[i] = true;
        i = i + 1;
      }
      i = 2;
      while (i <= n) {                         // the passes over the sieve 
        if (uncrossed[i]) {
          if (display && ((primes - (primes/8)*8) == 0)) write("\n");  // ensure line not too long
          primes = primes + 1;
          if (display) write(i, "\t");
          k = i;                               // now cross out multiples of i
		  uncrossed[k] = false;
          while(k <= n) {
            uncrossed[k] = false;
            k = k + i;
          }
          
        }
      
	  i = i + 1;
      it = it + 1;
      if (display) write("\n");
	  }
    }
    write(primes, " primes");
  } // main
